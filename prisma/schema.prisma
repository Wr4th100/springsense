generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// SpringShed
// - Location (coordinates)
// - ph
// - temp
// - turbidity
// - dissolved_oxygen
// - water level

// Weather Station
// - humidity
// - rainfall
// - wind speed
// - solar radiation sensor

model SpringShed {
    id           Int            @id @default(autoincrement())
    name         String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    state        String
    AirQuality   AirQuality[]
    WaterQuality WaterQuality[]
}

model WeatherStation {
    id         Int      @id @default(autoincrement())
    name       String
    location   Location @relation(fields: [locationId], references: [id])
    locationId Int
    acetone    Float
    airQuality String
    co         Float
    co2        Float
    ethanol    Float
    nh4        Float
    toluene    Float
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model AirQuality {
    id         Int          @id @default(autoincrement())
    location   Location     @relation(fields: [locationId], references: [id])
    locationId Int
    springShed SpringShed[]
    acetone    Float
    airQuality String
    co         Float
    co2        Float
    ethanol    Float
    nh4        Float
    toluene    Float
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
}

model WaterQuality {
    id               Int          @id @default(autoincrement())
    location         Location     @relation(fields: [locationId], references: [id])
    locationId       Int
    springShed       SpringShed[]
    ph               Float
    temp             Float
    turbidity        Float
    dissolved_oxygen Float
    water_level      Float
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
}

model Location {
    id             Int              @id @default(autoincrement())
    name           String
    latitude       Float
    longitude      Float
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    WeatherStation WeatherStation[]

    AirQuality   AirQuality[]
    WaterQuality WaterQuality[]
}

// / The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
// model iottelemetry {
//     messageId             BigInt?
//     deviceId              String?   @db.NVarChar(4000)
//     temperature           Float?
//     humidity              Float?
//     EventProcessedUtcTime DateTime?
//     EventEnqueuedUtcTime  DateTime?
//     ConnectionDeviceId    String?   @db.NVarChar(4000)

//     @@ignore
// }
